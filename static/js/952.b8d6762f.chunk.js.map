{"version":3,"file":"static/js/952.b8d6762f.chunk.js","mappings":"oRAOaA,GALYC,EAAAA,EAAAA,IAAH,6DAKFA,EAAAA,EAAAA,GAAH,+OAaJC,EAAOD,EAAAA,EAAAA,GAAH,sKAQJE,EAAMF,EAAAA,EAAAA,IAAH,+IAOHG,EAAQH,EAAAA,EAAAA,GAAH,kLAULI,EAAOJ,EAAAA,EAAAA,EAAH,kL,SC3CJK,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAGzB,OACE,SAACP,EAAD,UACGO,GACCA,EAASC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,aAAcC,EAAtC,EAAsCA,cAAtC,OACX,UAACX,EAAD,YACE,SAACC,EAAD,CAAKW,IAPC,kCAOcF,EAAcG,IAAKJ,GAAQE,KAC/C,SAACT,EAAD,UAAQO,GAAQE,KAChB,SAACR,EAAD,UAAOK,MAHED,EADA,KASpB,ECmBD,EA9Ba,WACX,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,UAAS,MAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,GAAKT,EAAL,CACA,IAAMV,EAAQ,mCAAG,gHAEUoB,EAAAA,EAAAA,IAAQV,GAFlB,gBAGO,KADZG,EAFK,EAELA,MACCQ,QACPH,GAAW,GAEbJ,EAAQD,GANK,gDAQbG,EAAS,KAAMM,SARF,yDAAH,qDAWdtB,GAZoB,CAarB,GAAE,CAACU,KAGF,+BACE,yBACIO,IAAYF,IAAS,SAACf,EAAD,CAAUC,SAAUY,OAIlD,C,+LC3BDU,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGJ,IAAMC,EAAgB,mCAAG,sGACPF,EAAAA,EAAAA,IAAA,qBADO,uBACtBG,EADsB,EACtBA,KACRC,QAAQC,IAAIF,GAFkB,kBAGvBA,GAHuB,2CAAH,qDAMhBG,EAAW,mCAAG,WAAMC,GAAN,yFACFP,EAAAA,EAAAA,IAAA,0EACuCO,IAFrC,uBACjBJ,EADiB,EACjBA,KADiB,kBAIlBA,GAJkB,2CAAH,sDAOXK,EAAe,mCAAG,WAAM5B,GAAN,yFACNoB,EAAAA,EAAAA,IAAA,iBAAoBpB,EAApB,oBADM,uBACrBuB,EADqB,EACrBA,KADqB,kBAGtBA,GAHsB,2CAAH,sDAMfN,EAAO,mCAAG,WAAMjB,GAAN,yFACEoB,EAAAA,EAAAA,IAAA,iBAAoBpB,EAApB,4BADF,uBACbuB,EADa,EACbA,KADa,kBAGdA,GAHc,2CAAH,sDAMPM,EAAU,mCAAG,WAAM7B,GAAN,yFACCoB,EAAAA,EAAAA,IAAA,iBACTpB,EADS,oCADD,uBACduB,EADc,EACdA,KADc,kBAKfA,GALe,2CAAH,qD","sources":["components/Cast/CastList.styled.js","components/Cast/CastList.jsx","components/Cast/Cast.jsx","service/fetchApi.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin: 0 auto;\n  padding: 20px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 35px;\n  max-width: calc(100vw - 48px);\n  margin: 0 auto;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Item = styled.li`\n  width: 180px;\n  height: 180px;\n  transition: transform 350ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\nexport const Img = styled.img`\n  width: 120px;\n  height: 120px;\n  border-radius: 50%;\n  object-fit: cover;\n  /* border-radius: 10px 10px 0 0; */\n`;\nexport const Title = styled.h2`\n  padding: 5px;\n  font-size: 18px;\n  font-weight: 500;\n  transition: color 350ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    color: #99a4f7;\n  }\n`;\n\nexport const Text = styled.p`\n  padding: 2px;\n  font-size: 14px;\n  font-weight: 400;\n  transition: color 350ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    color: #99a4f7;\n  }\n`;","import { List, Item, Img, Title, Text } from './CastList.styled';\n\nexport const CastList = ({ listCast }) => {\n  const Img_url = 'https://image.tmdb.org/t/p/w500';\n\n  return (\n    <List>\n      {listCast &&\n        listCast.map(({ id, character, name, profile_path, original_name }) => (\n          <Item key={id}>\n            <Img src={Img_url + profile_path} alt={name && original_name} />\n            <Title>{name && original_name}</Title>\n            <Text>{character}</Text>\n          </Item>\n        ))}\n    </List>\n  );\n};","\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { castGet } from 'service/fetchApi';\nimport { CastList } from './CastList';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n  const [isEmpty, setIsEmpty] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) return;\n    const CastList = async () => {\n      try {\n        const { cast } = await castGet(movieId);\n        if (cast.length === 0) {\n          setIsEmpty(true);\n        }\n        setCast(cast);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    CastList();\n  }, [movieId]);\n\n  return (\n    <>\n      <ul>\n        {!isEmpty && !error && <CastList listCast={cast} />}\n      </ul>\n    </>\n  );\n};\nexport default Cast;","// import axios from 'axios';\n\n\n// const API_KEY = \"519a61b17f14d9bd9145ca2f15d0094c\";\n// const BASE_URL = \"https://api.themoviedb.org/3\";\n\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '519a61b17f14d9bd9145ca2f15d0094c',\n};\n\nexport const movieTrendingGet = async () => {\n  const { data } = await axios.get(`/trending/all/day`);\n  console.log(data);\n  return data;\n};\n\nexport const movieSearch = async searchQuery => {\n  const { data } = await axios.get(`\n/search/movie?language=en-US&page=1&include_adult=false&query=${searchQuery}`);\n\n  return data;\n};\n\nexport const movieDetailsGet = async id => {\n  const { data } = await axios.get(`/movie/${id}?language=en-US`);\n\n  return data;\n};\n\nexport const castGet = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?language=en-US`);\n\n  return data;\n};\n\nexport const reviewsGet = async id => {\n    const { data } = await axios.get(\n        `/movie/${id}/reviews?language=en-US&page=1 `\n    );\n\n    return data;\n}; "],"names":["List","styled","Item","Img","Title","Text","CastList","listCast","map","id","character","name","profile_path","original_name","src","alt","movieId","useParams","useState","cast","setCast","error","setError","isEmpty","setIsEmpty","useEffect","castGet","length","message","axios","api_key","movieTrendingGet","data","console","log","movieSearch","searchQuery","movieDetailsGet","reviewsGet"],"sourceRoot":""}